Selection: 9

  |                                 |   0%

| In the last lesson, you learned about
| the two most fundamental members of R's
| *apply family of functions: lapply() and
| sapply(). Both take a list as input,
| apply a function to each element of the
| list, then combine and return the
| result. lapply() always returns a list,
| whereas sapply() attempts to simplify
| the result.

...

  |=                                |   4%

| In this lesson, you'll learn how to use
| vapply() and tapply(), each of which
| serves a very specific purpose within
| the Split-Apply-Combine methodology. For
| consistency, we'll use the same dataset
| we used in the 'lapply and sapply'
| lesson.

...

  |===                              |   8%

| The Flags dataset from the UCI Machine
| Learning Repository contains details of
| various nations and their flags. More
| information may be found here:
| http://archive.ics.uci.edu/ml/datasets/Flags

...

  |====                             |  12%

| I've stored the data in a variable
| called flags. If it's been a while since
| you completed the 'lapply and sapply'
| lesson, you may want to reacquaint
| yourself with the data by using
| functions like dim(), head(), str(), and
| summary() when you return to the prompt
| (>). You can also type viewinfo() at the
| prompt to bring up some documentation
| for the dataset. Let's get started!

...

  |=====                            |  16%

| As you saw in the last lesson, the
| unique() function returns a vector of
| the unique values contained in the
| object passed to it. Therefore,
| sapply(flags, unique) returns a list
| containing one vector of unique values
| for each column of the flags dataset.
| Try it again now.

> sapply(flags, unique)
$name
  [1] Afghanistan             
  [2] Albania                 
  [3] Algeria                 
  [4] American-Samoa          
  [5] Andorra                 
  [6] Angola                  
  [7] Anguilla                
  [8] Antigua-Barbuda         
  [9] Argentina               
 [10] Argentine               
 [11] Australia               
 [12] Austria                 
 [13] Bahamas                 
 [14] Bahrain                 
 [15] Bangladesh              
 [16] Barbados                
 [17] Belgium                 
 [18] Belize                  
 [19] Benin                   
 [20] Bermuda                 
 [21] Bhutan                  
 [22] Bolivia                 
 [23] Botswana                
 [24] Brazil                  
 [25] British-Virgin-Isles    
 [26] Brunei                  
 [27] Bulgaria                
 [28] Burkina                 
 [29] Burma                   
 [30] Burundi                 
 [31] Cameroon                
 [32] Canada                  
 [33] Cape-Verde-Islands      
 [34] Cayman-Islands          
 [35] Central-African-Republic
 [36] Chad                    
 [37] Chile                   
 [38] China                   
 [39] Colombia                
 [40] Comorro-Islands         
 [41] Congo                   
 [42] Cook-Islands            
 [43] Costa-Rica              
 [44] Cuba                    
 [45] Cyprus                  
 [46] Czechoslovakia          
 [47] Denmark                 
 [48] Djibouti                
 [49] Dominica                
 [50] Dominican-Republic      
 [51] Ecuador                 
 [52] Egypt                   
 [53] El-Salvador             
 [54] Equatorial-Guinea       
 [55] Ethiopia                
 [56] Faeroes                 
 [57] Falklands-Malvinas      
 [58] Fiji                    
 [59] Finland                 
 [60] France                  
 [61] French-Guiana           
 [62] French-Polynesia        
 [63] Gabon                   
 [64] Gambia                  
 [65] Germany-DDR             
 [66] Germany-FRG             
 [67] Ghana                   
 [68] Gibraltar               
 [69] Greece                  
 [70] Greenland               
 [71] Grenada                 
 [72] Guam                    
 [73] Guatemala               
 [74] Guinea                  
 [75] Guinea-Bissau           
 [76] Guyana                  
 [77] Haiti                   
 [78] Honduras                
 [79] Hong-Kong               
 [80] Hungary                 
 [81] Iceland                 
 [82] India                   
 [83] Indonesia               
 [84] Iran                    
 [85] Iraq                    
 [86] Ireland                 
 [87] Israel                  
 [88] Italy                   
 [89] Ivory-Coast             
 [90] Jamaica                 
 [91] Japan                   
 [92] Jordan                  
 [93] Kampuchea               
 [94] Kenya                   
 [95] Kiribati                
 [96] Kuwait                  
 [97] Laos                    
 [98] Lebanon                 
 [99] Lesotho                 
[100] Liberia                 
[101] Libya                   
[102] Liechtenstein           
[103] Luxembourg              
[104] Malagasy                
[105] Malawi                  
[106] Malaysia                
[107] Maldive-Islands         
[108] Mali                    
[109] Malta                   
[110] Marianas                
[111] Mauritania              
[112] Mauritius               
[113] Mexico                  
[114] Micronesia              
[115] Monaco                  
[116] Mongolia                
[117] Montserrat              
[118] Morocco                 
[119] Mozambique              
[120] Nauru                   
[121] Nepal                   
[122] Netherlands             
[123] Netherlands-Antilles    
[124] New-Zealand             
[125] Nicaragua               
[126] Niger                   
[127] Nigeria                 
[128] Niue                    
[129] North-Korea             
[130] North-Yemen             
[131] Norway                  
[132] Oman                    
[133] Pakistan                
[134] Panama                  
[135] Papua-New-Guinea        
[136] Parguay                 
[137] Peru                    
[138] Philippines             
[139] Poland                  
[140] Portugal                
[141] Puerto-Rico             
[142] Qatar                   
[143] Romania                 
[144] Rwanda                  
[145] San-Marino              
[146] Sao-Tome                
[147] Saudi-Arabia            
[148] Senegal                 
[149] Seychelles              
[150] Sierra-Leone            
[151] Singapore               
[152] Soloman-Islands         
[153] Somalia                 
[154] South-Africa            
[155] South-Korea             
[156] South-Yemen             
[157] Spain                   
[158] Sri-Lanka               
[159] St-Helena               
[160] St-Kitts-Nevis          
[161] St-Lucia                
[162] St-Vincent              
[163] Sudan                   
[164] Surinam                 
[165] Swaziland               
[166] Sweden                  
[167] Switzerland             
[168] Syria                   
[169] Taiwan                  
[170] Tanzania                
[171] Thailand                
[172] Togo                    
[173] Tonga                   
[174] Trinidad-Tobago         
[175] Tunisia                 
[176] Turkey                  
[177] Turks-Cocos-Islands     
[178] Tuvalu                  
[179] UAE                     
[180] Uganda                  
[181] UK                      
[182] Uruguay                 
[183] US-Virgin-Isles         
[184] USA                     
[185] USSR                    
[186] Vanuatu                 
[187] Vatican-City            
[188] Venezuela               
[189] Vietnam                 
[190] Western-Samoa           
[191] Yugoslavia              
[192] Zaire                   
[193] Zambia                  
[194] Zimbabwe                
194 Levels: Afghanistan Albania ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777
  [7]  7690    84    19     1   143    31
 [13]    23   113    47  1099   600  8512
 [19]     6   111   274   678    28   474
 [25]  9976     4   623  1284   757  9561
 [31]  1139     2   342    51   115     9
 [37]   128    43    22    49   284  1001
 [43]    21  1222    12    18   337   547
 [49]    91   268    10   108   249   239
 [55]   132  2176   109   246    36   215
 [61]   112    93   103  3268  1904  1648
 [67]   435    70   301   323    11   372
 [73]    98   181   583   236    30  1760
 [79]     3   587   118   333  1240  1031
 [85]  1973  1566   447   783   140    41
 [91]  1267   925   121   195   324   212
 [97]   804    76   463   407  1285   300
[103]   313    92   237    26  2150   196
[109]    72   637  1221    99   288   505
[115]    66  2506    63    17   450   185
[121]   945   514    57     5   164   781
[127]   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15
 [8]    8   90   10    1    6  119    9
[15]   35    4   24    2   11 1008    5
[22]   47   31   54   17   61   14  684
[29]  157   39   57  118   13   77   12
[36]   56   18   84   48   36   22   29
[43]   38   49   45  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white 
[6] orange black  brown 
8 Levels: black blue brown gold ... white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9
[14] 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white 
[6] orange gold  
7 Levels: black blue gold ... white

$botright
[1] green  red    white  black  blue  
[6] gold   orange brown 
8 Levels: black blue brown gold ... white


| All that practice is paying off!

  |=======                          |  20%

| What if you had forgotten how unique()
| works and mistakenly thought it returns
| the *number* of unique values contained
| in the object passed to it? Then you
| might have incorrectly expected
| sapply(flags, unique) to return a
| numeric vector, since each element of
| the list returned would contain a single
| number and sapply() could then simplify
| the result to a vector.

...

  |========                         |  24%

| When working interactively (at the
| prompt), this is not much of a problem,
| since you see the result immediately and
| will quickly recognize your mistake.
| However, when working non-interactively
| (e.g. writing your own functions), a
| misunderstanding may go undetected and
| cause incorrect results later on.
| Therefore, you may wish to be more
| careful and that's where vapply() is
| useful.

...

  |=========                        |  28%

| Whereas sapply() tries to 'guess' the
| correct format of the result, vapply()
| allows you to specify it explicitly. If
| the result doesn't match the format you
| specify, vapply() will throw an error,
| causing the operation to stop. This can
| prevent significant problems in your
| code that might be caused by getting
| unexpected return values from sapply().

...

  |===========                      |  32%

| Try vapply(flags, unique, numeric(1)),
| which says that you expect each element
| of the result to be a numeric vector of
| length 1. Since this is NOT actually the
| case, YOU WILL GET AN ERROR. Once you
| get the error, type ok() to continue to
| the next question.

> vapply(flags,unique, numeric(1))
Error in vapply(flags, unique, numeric(1)) : values must be length 1,
 but FUN(X[[1]]) result is length 194
> ok
function() {
  invisible()
}
<environment: 0x184d6cd0>

| Almost! Try again. Or, type info() for
| more options.

| Type vapply(flags, unique, numeric(1)),
| then type ok() to continue to the next
| question.

> ok()

| Keep up the great work!

  |============                     |  36%

| Recall from the previous lesson that
| sapply(flags, class) will return a
| character vector containing the class of
| each column in the dataset. Try that
| again now to see the result.

> sapply(flags, class)
      name   landmass       zone 
  "factor"  "integer"  "integer" 
      area population   language 
 "integer"  "integer"  "integer" 
  religion       bars    stripes 
 "integer"  "integer"  "integer" 
   colours        red      green 
 "integer"  "integer"  "integer" 
      blue       gold      white 
 "integer"  "integer"  "integer" 
     black     orange    mainhue 
 "integer"  "integer"   "factor" 
   circles    crosses   saltires 
 "integer"  "integer"  "integer" 
  quarters   sunstars   crescent 
 "integer"  "integer"  "integer" 
  triangle       icon    animate 
 "integer"  "integer"  "integer" 
      text    topleft   botright 
 "integer"   "factor"   "factor" 

| Excellent job!

  |=============                    |  40%

| If we wish to be explicit about the
| format of the result we expect, we can
| use vapply(flags, class, character(1)).
| The 'character(1)' argument tells R that
| we expect the class function to return a
| character vector of length 1 when
| applied to EACH column of the flags
| dataset. Try it now.

> vapply (flags, class, character(1)))
Error: unexpected ')' in "vapply (flags, class, character(1)))"
> ok()

| That's not exactly what I'm looking for.
| Try again. Or, type info() for more
| options.

| Use vapply(flags, class, character(1))
| to return a character vector of column
| classes.

> vapply (flags, class, character(1))
      name   landmass       zone 
  "factor"  "integer"  "integer" 
      area population   language 
 "integer"  "integer"  "integer" 
  religion       bars    stripes 
 "integer"  "integer"  "integer" 
   colours        red      green 
 "integer"  "integer"  "integer" 
      blue       gold      white 
 "integer"  "integer"  "integer" 
     black     orange    mainhue 
 "integer"  "integer"   "factor" 
   circles    crosses   saltires 
 "integer"  "integer"  "integer" 
  quarters   sunstars   crescent 
 "integer"  "integer"  "integer" 
  triangle       icon    animate 
 "integer"  "integer"  "integer" 
      text    topleft   botright 
 "integer"   "factor"   "factor" 

| Keep up the great work!

  |===============                  |  44%

| Note that since our expectation was
| correct (i.e. character(1)), the
| vapply() result is identical to the
| sapply() result -- a character vector of
| column classes.

...

  |================                 |  48%

| You might think of vapply() as being
| 'safer' than sapply(), since it requires
| you to specify the format of the output
| in advance, instead of just allowing R
| to 'guess' what you wanted. In addition,
| vapply() may perform faster than
| sapply() for large datasets. However,
| when doing data analysis interactively
| (at the prompt), sapply() saves you some
| typing and will often be good enough.

...

  |=================                |  52%

| As a data analyst, you'll often wish to
| split your data up into groups based on
| the value of some variable, then apply a
| function to the members of each group.
| The next function we'll look at,
| tapply(), does exactly that.

...

  |==================               |  56%

| Use ?tapply to pull up the
| documentation.

> ?tapply

| That's a job well done!

  |====================             |  60%

| The 'landmass' variable in our dataset
| takes on integer values between 1 and 6,
| each of which represents a different
| part of the world. Use
| table(flags$landmass) to see how many
| flags/countries fall into each group.

> 
> table(flags$landmass)

 1  2  3  4  5  6 
31 17 35 52 39 20 

| That's the answer I was looking for.

  |=====================            |  64%

| The 'animate' variable in our dataset
| takes the value 1 if a country's flag
| contains an animate image (e.g. an
| eagle, a tree, a human hand) and 0
| otherwise. Use table(flags$animate) to
| see how many flags contain an animate
| image.

> table(flags$inanimate)
< table of extent 0 >

| Not quite, but you're learning! Try
| again. Or, type info() for more options.

| Use table(flags$animate) to see how many
| flags contain an animate image.

> table(flags$animate)

  0   1 
155  39 

| All that practice is paying off!

  |======================           |  68%

| This tells us that 39 flags contain an
| animate object (animate = 1) and 155 do
| not (animate = 0).

...

  |========================         |  72%

| If you take the arithmetic mean of a
| bunch of 0s and 1s, you get the
| proportion of 1s. Use
| tapply(flags$animate, flags$landmass,
| mean) to apply the mean function to the
| 'animate' variable separately for each
| of the six landmass groups, thus giving
| us the proportion of flags containing an
| animate image WITHIN each landmass
| group.

> tapply(flags$animate, flags$landmass, mean)
        1         2         3         4 
0.4193548 0.1764706 0.1142857 0.1346154 
        5         6 
0.1538462 0.3000000 

| That's a job well done!

  |=========================        |  76%

| The first landmass group (landmass = 1)
| corresponds to North America and
| contains the highest proportion of flags
| with an animate image (0.4194).

...

  |==========================       |  80%

| Similarly, we can look at a summary of
| population values (in round millions)
| for countries with and without the color
| red on their flag with
| tapply(flags$population, flags$red,
| summary).

> tapply(flags$population, flags$red, summary)
$`0`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
   0.00    0.00    3.00   27.63    9.00 
   Max. 
 684.00 

$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
    0.0     0.0     4.0    22.1    15.0 
   Max. 
 1008.0 


| Great job!

  |============================     |  84%

| What is the median population (in
| millions) for countries *without* the
| color red on their flag?

1: 0.0
2: 22.1
3: 4.0
4: 9.0
5: 3.0
6: 27.6

Selection: 2

| Try again. Getting it right on the first
| try is boring anyway!

| Use your result from the last question.
| Recall that red = 0 means that the color
| red is NOT present on a countries flag.

1: 9.0
2: 22.1
3: 3.0
4: 4.0
5: 27.6
6: 0.0

Selection: 3

| Keep working like that and you'll get
| there!

  |=============================    |  88%

| Lastly, use the same approach to look at
| a summary of population values for each
| of the six landmasses.

> tapply(flags$population, flags$red, summary)
$`0`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
   0.00    0.00    3.00   27.63    9.00 
   Max. 
 684.00 

$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
    0.0     0.0     4.0    22.1    15.0 
   Max. 
 1008.0 


| Not exactly. Give it another go. Or,
| type info() for more options.

| You can see a summary of populations for
| each of the six landmasses by calling
| tapply() with three arguments:
| flags$population, flags$landmass, and
| summary.

> tapply(flag$population,flag$landmass, summary)
Error in tapply(flag$population, flag$landmass, summary) : 
  object 'flag' not found
> tapply(flags$population,flags$landmass, summary)
$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
   0.00    0.00    0.00   12.29    4.50 
   Max. 
 231.00 

$`2`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
   0.00    1.00    6.00   15.71   15.00 
   Max. 
 119.00 

$`3`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
   0.00    0.00    8.00   13.86   16.00 
   Max. 
  61.00 

$`4`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
  0.000   1.000   5.000   8.788   9.750 
   Max. 
 56.000 

$`5`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
   0.00    2.00   10.00   69.18   39.00 
   Max. 
1008.00 

$`6`
   Min. 1st Qu.  Median    Mean 3rd Qu. 
   0.00    0.00    0.00   11.30    1.25 
   Max. 
 157.00 


| Keep working like that and you'll get
| there!

  |==============================   |  92%

| What is the maximum population (in
| millions) for the fourth landmass group
| (Africa)?

1: 119.0
2: 157.00
3: 56.00
4: 1010.0
5: 5.00

Selection: 3

| Excellent work!

  |================================ |  96%

| In this lesson, you learned how to use
| vapply() as a safer alternative to
| sapply(), which is most helpful when
| writing your own functions. You also
| learned how to use tapply() to split
| your data into groups based on the value
| of some variable, then apply a function
| to each group. These functions will come
| in handy on your quest to become a
| better data analyst.

...

  |=================================| 100%

| Would you like to inform someone about
| your successful completion of this
| lesson?

1: No
2: Yes

Selection: 2
| What is your full name?
Halli Goodman
| What is the email address of the person
| you'd like to notify?
mike.martin@senecacollege.ca

Does everything look good?

Your name: Halli Goodman
Send to: mike.martin@senecacollege.ca

1: Yes
2: No

Selection: 1

#########################################

I just tried to create a new email with the following info:

To: mike.martin@senecacollege.ca
Subject: Halli Goodman just completed R Programming - vapply and tapply
Body: <empty>

If it didn't work, you can send the same email manually.

#########################################


| You got it!

| You've reached the end of this lesson!
| Returning to the main menu...
