Selection: 11

  |                                 |   0%

| One of the great advantages of using a
| statistical programming language like R
| is its vast collection of tools for
| simulating random numbers.

...

  |=                                |   3%

| This lesson assumes familiarity with a
| few common probability distributions,
| but these topics will only be discussed
| with respect to random number
| generation. Even if you have no prior
| experience with these concepts, you
| should be able to complete the lesson
| and understand the main ideas.

...

  |==                               |   6%

| The first function we'll use to generate
| random numbers is sample(). Use ?sample
| to pull up the documentation.

> ?sample

| You nailed it! Good job!

  |===                              |   9%

| Let's simulate rolling four six-sided
| dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 6 5 6 3

| Keep up the great work!

  |====                             |  12%

| Now repeat the command to see how your
| result differs. (The probability of
| rolling the exact same result is (1/6)^4
| = 0.00077, which is pretty small!)

> sample(1:6, 4, replace = TRUE)
[1] 3 5 4 1

| Perseverance, that's the answer.

  |=====                            |  15%

| sample(1:6, 4, replace = TRUE) instructs
| R to randomly select four numbers
| between 1 and 6, WITH replacement.
| Sampling with replacement simply means
| that each number is "replaced" after it
| is selected, so that the same number can
| show up more than once. This is what we
| want here, since what you roll on one
| die shouldn't affect what you roll on
| any of the others.

...

  |======                           |  18%

| Now sample 10 numbers between 1 and 20,
| WITHOUT replacement. To sample without
| replacement, simply leave off the
| 'replace' argument.

> sample(1:20, 10)
 [1]  5 19 20 15  2 18 11  8  7 13

| That's correct!

  |=======                          |  21%

| Since the last command sampled without
| replacement, no number appears more than
| once in the output.

...

  |========                         |  24%

| LETTERS is a predefined variable in R
| containing a vector of all 26 letters of
| the English alphabet. Take a look at it
| now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I"
[10] "J" "K" "L" "M" "N" "O" "P" "Q" "R"
[19] "S" "T" "U" "V" "W" "X" "Y" "Z"

| Keep up the great work!

  |=========                        |  27%

| The sample() function can also be used
| to permute, or rearrange, the elements
| of a vector. For example, try
| sample(LETTERS) to permute all 26
| letters of the English alphabet.

> sample(LETTERS)
 [1] "L" "V" "J" "D" "B" "I" "H" "Q" "Y"
[10] "R" "Z" "M" "G" "P" "F" "A" "O" "T"
[19] "K" "N" "U" "X" "W" "C" "E" "S"

| You are amazing!

  |==========                       |  30%

| This is identical to taking a sample of
| size 26 from LETTERS, without
| replacement. When the 'size' argument to
| sample() is not specified, R takes a
| sample equal in size to the vector from
| which you are sampling.

...

  |===========                      |  33%

| Now, suppose we want to simulate 100
| flips of an unfair two-sided coin. This
| particular coin has a 0.3 probability of
| landing 'tails' and a 0.7 probability of
| landing 'heads'.

...

  |============                     |  36%

| Let the value 0 represent tails and the
| value 1 represent heads. Use sample() to
| draw a sample of size 100 from the
| vector c(0,1), with replacement. Since
| the coin is unfair, we must attach
| specific probabilities to the values 0
| (tails) and 1 (heads) with a fourth
| argument, prob = c(0.3, 0.7). Assign the
| result to a new variable called flips.

> 
> sample(c(0,1), 11, replacement = TRUE, prob = c(0.3, 0.7))
Error in sample(c(0, 1), 11, replacement = TRUE, prob = c(0.3, 0.7)) : 
  unused argument (replacement = TRUE)
> sample(c(0,1), 11, replacement = TRUE, prob = c(0.3, 0.7)))
Error: unexpected ')' in "sample(c(0,1), 11, replacement = TRUE, prob = c(0.3, 0.7)))"
> sample(c(0,1), 11, replacement = TRUE, prob = c(0.3, 0.7))
Error in sample(c(0, 1), 11, replacement = TRUE, prob = c(0.3, 0.7)) : 
  unused argument (replacement = TRUE)
> sample(c(0,1), 11,. replace = TRUE, prob = c(0.3, 0.7))
Error: unexpected symbol in "sample(c(0,1), 11,. replace"
> sample(c(0,1), 11, replace = TRUE, prob = c(0.3, 0.7))
 [1] 0 0 1 1 0 1 1 1 0 1 0

| You almost had it, but not quite. Try
| again. Or, type info() for more options.

| The following command will produce 100
| flips of an unfair coin and assign the
| result: flips <- sample(c(0,1), 100,
| replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1), 11, replace = TRUE, prob = c(0.3, 0.7))

| Almost! Try again. Or, type info() for
| more options.

| The following command will produce 100
| flips of an unfair coin and assign the
| result: flips <- sample(c(0,1), 100,
| replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| Excellent job!

  |=============                    |  39%

| View the contents of the flips variable.

> flips
  [1] 0 0 1 0 0 1 1 1 0 1 0 1 1 1 1 0 1 0 1
 [20] 1 0 1 1 0 1 1 0 1 0 1 0 1 1 1 1 0 0 0
 [39] 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 0 0
 [58] 1 1 1 0 1 1 1 0 0 1 1 1 1 0 1 1 0 0 0
 [77] 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 1 0 1 1
 [96] 0 1 0 1 1

| Keep up the great work!

  |==============                   |  42%

| Since we set the probability of landing
| heads on any given flip to be 0.7, we'd
| expect approximately 70 of our coin
| flips to have the value 1. Count the
| actual number of 1s contained in flips
| using the sum() function.

> sum(flips)
[1] 64

| You're the best!

  |===============                  |  45%

| A coin flip is a binary outcome (0 or 1)
| and we are performing 100 independent
| trials (coin flips), so we can use use
| rbinom() to simulate a binomial random
| variable. Pull up the documentation for
| rbinom() using ?rbinom.

> ?rbinom

| All that hard work is paying off!

  |================                 |  48%

| Each probability distribution in R has
| an r*** function (for "random"), a d***
| function (for "density"), a p*** (for
| "probability"), and q*** (for
| "quantile"). We are most interested in
| the r*** functions in this lesson, but I
| encourage you to explore the others on
| your own.

...

  |=================                |  52%

| A binomial random variable represents
| the number of 'successes' (heads) in a
| given number of independent 'trials'
| (coin flips). Therefore, we can generate
| a single random variable that represents
| the number of heads in 100 flips of our
| unfair coin using rbinom(1, size = 100,
| prob = 0.7). Note that you only specify
| the probability of 'success' (heads) and
| NOT the probability of 'failure'
| (tails). Try it now.

> 
> rbinom(1, size = 100, prov = 0.7)
Error in rbinom(1, size = 100, prov = 0.7) : unused argument (prov = 0.7)
> rbinom(1, size = 100, prob = 0.7)
[1] 71

| Excellent work!

  |==================               |  55%

| Equivalently, if we want to see all of
| the 0s and 1s, we can request 100
| observations, each of size 1, with
| success probability of 0.7. Give it a
| try, assigning the result to a new
| variable called flips2.

> flips2 <- rbinom(100, size = 1, prob = 0.7)

| You nailed it! Good job!

  |===================              |  58%

| View the contents of flips2.

> flips2
  [1] 1 1 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0
 [20] 1 1 1 1 1 0 1 1 1 1 0 0 0 1 1 0 0 1 0
 [39] 0 0 1 0 1 0 1 1 1 0 1 1 1 0 0 1 1 1 1
 [58] 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1
 [77] 1 0 1 0 0 0 1 0 1 1 1 0 0 1 1 1 0 1 0
 [96] 1 1 0 0 1

| All that practice is paying off!

  |====================             |  61%

| Now use sum() to count the number of 1s
| (heads) in flips2. It should be close to
| 70!

> sum(flips2)
[1] 68

| You're the best!

  |=====================            |  64%

| Similar to rbinom(), we can use R to
| simulate random numbers from many other
| probability distributions. Pull up the
| documentation for rnorm() now.

> ?rnorm

| You are really on a roll!

  |======================           |  67%

| The standard normal distribution has
| mean 0 and standard deviation 1. As you
| can see under the 'Usage' section in the
| documentation, the default values for
| the 'mean' and 'sd' arguments to rnorm()
| are 0 and 1, respectively. Thus,
| rnorm(10) will generate 10 random
| numbers from a standard normal
| distribution. Give it a try.

> rnorm(10)
 [1]  0.01610556  0.56721518 -0.25154075
 [4] -0.34983437  0.79814223  1.32053432
 [7]  1.96774779  0.77977830 -0.48917249
[10] -0.61391276

| Nice work!

  |=======================          |  70%

| Now do the same, except with a mean of
| 100 and a standard deviation of 25.

> rnorm(10)
 [1]  2.8906112  0.7041260 -0.4791362
 [4] -1.1854330 -1.1960731 -1.3237179
 [7]  1.0547890  0.2489918  0.1437299
[10]  1.1598166

| That's not the answer I was looking for,
| but try again. Or, type info() for more
| options.

| Use rnorm(10, mean = 100, sd = 25) to
| generate 10 random numbers from a normal
| distribution with mean 100 and standard
| deviation 25.

> rnorm(10, mean = 100, sd = 25)
 [1] 150.85751  74.47536 112.88736
 [4]  89.22514 107.38536  48.74785
 [7]  75.52660 131.51194  88.63085
[10]  81.37246

| You nailed it! Good job!

  |========================         |  73%

| Finally, what if we want to simulate 100
| *groups* of random numbers, each
| containing 5 values generated from a
| Poisson distribution with mean 10? Let's
| start with one group of 5 numbers, then
| I'll show you how to repeat the
| operation 100 times in a convenient and
| compact way.

...

  |=========================        |  76%

| Generate 5 random values from a Poisson
| distribution with mean 10. Check out the
| documentation for rpois() if you need
| help.

> 
> ?rpois
> rpois(10, mean = 10)
Error in rpois(10, mean = 10) : unused argument (mean = 10)
> rpois(10, mean=10)
Error in rpois(10, mean = 10) : unused argument (mean = 10)
> rpois(10, mean=10)
Error in rpois(10, mean = 10) : unused argument (mean = 10)
> rpois(10, mean=10)
Error in rpois(10, mean = 10) : unused argument (mean = 10)
> ?rpois
> rpois(10, 10)
 [1] 13 14  6 12 11 11 16  9 13 11

| Keep trying! Or, type info() for more
| options.

| Use rpois(5, 10) to generate 5 random
| numbers from a Poisson distribution with
| mean 10.

> rpois(5), 10)
Error: unexpected ',' in "rpois(5),"
> rpois(5, 10)
[1]  8 14 10  9 11

| Keep up the great work!

  |==========================       |  79%

| Now use replicate(100, rpois(5, 10)) to
| perform this operation 100 times. Store
| the result in a new variable called
| my_pois.

> my_pois <- replicate(100, rpois(5,10))

| You are really on a roll!

  |===========================      |  82%

| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]   15   11   10    6   10   10    9
[2,]   11    8    9   11    8   10    4
[3,]    8   11    7   14   11    9    6
[4,]   11   12   16   15   11    8   13
[5,]   13    5   11    8    9    9   16
     [,8] [,9] [,10] [,11] [,12] [,13]
[1,]   11   15    10    11     8     6
[2,]   15    6     6    11     9    10
[3,]    5    4     5    11    17    12
[4,]    7    8    11    12    10    10
[5,]   12    8    11    16     7     5
     [,14] [,15] [,16] [,17] [,18] [,19]
[1,]     9     9    15     9     7     9
[2,]    12    14    11     7    12     6
[3,]    12    10    11     9    10     9
[4,]    13    13     6    13    10     6
[5,]    12    13     7     7     9    10
     [,20] [,21] [,22] [,23] [,24] [,25]
[1,]    11    11    12    11     5    11
[2,]    15    15     5    16    11     8
[3,]    15     8     9     8    13    10
[4,]     8     8     7     6     6     4
[5,]    12    12     9     9     6     9
     [,26] [,27] [,28] [,29] [,30] [,31]
[1,]     6     3     7     5     8    13
[2,]    12    17     8     9    13     8
[3,]    10    10     8    10    15    14
[4,]    12    11    13     9    11    13
[5,]    13     6    12     6    12    13
     [,32] [,33] [,34] [,35] [,36] [,37]
[1,]    20    10    11    10     7     5
[2,]     7     9    10     9    16    10
[3,]     3    10     9    11    10    14
[4,]     5    12     9    15    17    15
[5,]    10     7    14     5     9     9
     [,38] [,39] [,40] [,41] [,42] [,43]
[1,]    10    10     7    11    10    16
[2,]    10     9     8    13    17     8
[3,]     7     8     9    12     7    14
[4,]    10     9     9     6     9     9
[5,]    10    11     8    11    12     8
     [,44] [,45] [,46] [,47] [,48] [,49]
[1,]     7    13     7    11    14     8
[2,]     3    14    10    16     9     6
[3,]    20     9    12    15     8    15
[4,]     8     9     9    11    11    13
[5,]    10     6     9    11    15    13
     [,50] [,51] [,52] [,53] [,54] [,55]
[1,]    13    10    10    12     7    11
[2,]    11     9     7    12     7    11
[3,]    11    13     6    10    12     7
[4,]    10    10     9     6    12     9
[5,]    18    14    11     8     8    12
     [,56] [,57] [,58] [,59] [,60] [,61]
[1,]     6    10     7    13     2     8
[2,]    11     6    10     8    18    10
[3,]     1     8     6    12    12     9
[4,]     9     7    19    11    11     7
[5,]     6     7     8    12     7     8
     [,62] [,63] [,64] [,65] [,66] [,67]
[1,]    10     7    10     5    11     7
[2,]     8     6    12     9     9    10
[3,]     7     6     4     9     7     7
[4,]    12    12     6     9     9     8
[5,]    12     8    11     4    11     7
     [,68] [,69] [,70] [,71] [,72] [,73]
[1,]    10     8     7    13    10     9
[2,]    12    10    10     6     8    16
[3,]    13     5     9     4     8    14
[4,]    14    11     7    11    10     8
[5,]     6     9    11    15     7    11
     [,74] [,75] [,76] [,77] [,78] [,79]
[1,]    10    12     6    12     4     8
[2,]     7     7    10     6     8    15
[3,]    11    12    11     9     7    10
[4,]    12     6    17     9    11    10
[5,]     7     6     7    11     8    11
     [,80] [,81] [,82] [,83] [,84] [,85]
[1,]    12    10    13     9     7     9
[2,]    12     9     9    13     7    16
[3,]     4     9     6    11     8     6
[4,]     8     4    18     7     9    12
[5,]     8    13     6    13     9    12
     [,86] [,87] [,88] [,89] [,90] [,91]
[1,]    11    13     8    13     6    15
[2,]    10     7     8    15    12    13
[3,]     8     9    11    11     7     8
[4,]    10    10    11    15     7    17
[5,]    10    10    14    10    11    14
     [,92] [,93] [,94] [,95] [,96] [,97]
[1,]    10    13     7     7    12    11
[2,]     3    10    12     8    13    13
[3,]     6    12    11     6    13    13
[4,]    11    13     7    10     7    10
[5,]    12    10     7    10     8     8
     [,98] [,99] [,100]
[1,]    11    11     17
[2,]    20     9     10
[3,]     7    14     10
[4,]     7     8     16
[5,]    13     8      9

| You are amazing!

  |============================     |  85%

| replicate() created a matrix, each
| column of which contains 5 random
| numbers generated from a Poisson
| distribution with mean 10. Now we can
| find the mean of each column in my_pois
| using the colMeans() function. Store the
| result in a variable called cm.

> cm <- colMeans(my_pois)

| That's the answer I was looking for.

  |=============================    |  88%

| And let's take a look at the
| distribution of our column means by
| plotting a histogram with hist(cm).

> hist(cm)

| Keep up the great work!

  |==============================   |  91%

| Looks like our column means are almost
| normally distributed, right? That's the
| Central Limit Theorem at work, but
| that's a lesson for another day!

...

  |===============================  |  94%

| All of the standard probability
| distributions are built into R,
| including exponential (rexp()),
| chi-squared (rchisq()), gamma
| (rgamma()), .... Well, you see the
| pattern.

...

  |================================ |  97%

| Simulation is practically a field of its
| own and we've only skimmed the surface
| of what's possible. I encourage you to
| explore these and other functions
| further on your own.

...

  |=================================| 100%

| Would you like to inform someone about
| your successful completion of this
| lesson?

1: Yes
2: No

Selection: 1
| What is your full name?
Halli Goodman
| What is the email address of the person
| you'd like to notify?
mike.martin@senecacollege.ca

Does everything look good?

Your name: Halli Goodman
Send to: mike.martin@senecacollege.ca

1: Yes
2: No

Selection: 1

#########################################

I just tried to create a new email with the following info:

To: mike.martin@senecacollege.ca
Subject: Halli Goodman just completed R Programming - Simulation
Body: <empty>

If it didn't work, you can send the same email manually.

#########################################


| Great job!

| You've reached the end of this lesson!
| Returning to the main menu...
