| Please choose a lesson, or type 0 to
| return to course menu.

 1: Basic Building Blocks
 2: Sequences of Numbers
 3: Vectors
 4: Missing Values
 5: Subsetting Vectors
 6: Matrices and Data Frames
 7: Logic
 8: lapply and sapply
 9: vapply and tapply
10: Looking at Data
11: Simulation
12: Dates and Times

Selection: 4

  |                                 |   0%

| Missing values play an important role in
| statistics and data analysis. Often,
| missing values must not be ignored, but
| rather they should be carefully studied
| to see if there's an underlying pattern
| or cause for their missingness.

...

  |==                               |   5%

| In R, NA is used to represent any value
| that is 'not available' or 'missing' (in
| the statistical sense). In this lesson,
| we'll explore missing values further.

...

  |===                              |  10%

| Any operation involving NA generally
| yields NA as the result. To illustrate,
| let's create a vector c(44, NA, 5, NA)
| and assign it to a variable x.

> x <- c(44, NA, 5, NA)

| You are quite good my friend!

  |=====                            |  15%

| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| You're the best!

  |=======                          |  20%

| Notice that the elements of the
| resulting vector that correspond with
| the NA values in x are also NA.

...

  |========                         |  25%

| To make things a little more
| interesting, lets create a vector
| containing 1000 draws from a standard
| normal distribution with y <-
| rnorm(1000).

> y <- rnorm(1000)

| You are really on a roll!

  |==========                       |  30%

| Next, let's create a vector containing
| 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| That's correct!

  |============                     |  35%

| Finally, let's select 100 elements at
| random from these 2000 values (combining
| y and z) such that we don't know how
| many NAs we'll wind up with or what
| positions they'll occupy in our final
| vector -- my_data <- sample(c(y, z),
| 100).

> my_data <- sample(c(y,z), 100)

| Keep up the great work!

  |=============                    |  40%

| Let's first ask the question of where
| our NAs are located in our data. The
| is.na() function tells us whether each
| element of a vector is NA. Call is.na()
| on my_data and assign the result to
| my_na.

> is.na(my_datA)
Error: object 'my_datA' not found
> is.na(my_data)
  [1] FALSE  TRUE  TRUE  TRUE FALSE FALSE
  [7] FALSE  TRUE FALSE FALSE FALSE  TRUE
 [13] FALSE FALSE  TRUE FALSE FALSE FALSE
 [19]  TRUE FALSE  TRUE FALSE  TRUE  TRUE
 [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [31] FALSE FALSE  TRUE  TRUE FALSE FALSE
 [37]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
 [43]  TRUE FALSE FALSE  TRUE  TRUE FALSE
 [49] FALSE FALSE FALSE  TRUE  TRUE FALSE
 [55] FALSE  TRUE  TRUE  TRUE FALSE  TRUE
 [61]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
 [67] FALSE  TRUE FALSE  TRUE FALSE  TRUE
 [73]  TRUE FALSE  TRUE  TRUE FALSE  TRUE
 [79]  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [85] FALSE FALSE FALSE FALSE  TRUE  TRUE
 [91]  TRUE FALSE FALSE FALSE FALSE  TRUE
 [97]  TRUE FALSE  TRUE  TRUE

| That's not exactly what I'm looking for.
| Try again. Or, type info() for more
| options.

| Assign the result of is.na(my_data) to
| the variable my_na.

> my_na <- is.na(my_data)

| That's the answer I was looking for.

  |===============                  |  45%

| Now, print my_na to see what you came up
| with.

> my_na
  [1] FALSE  TRUE  TRUE  TRUE FALSE FALSE
  [7] FALSE  TRUE FALSE FALSE FALSE  TRUE
 [13] FALSE FALSE  TRUE FALSE FALSE FALSE
 [19]  TRUE FALSE  TRUE FALSE  TRUE  TRUE
 [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [31] FALSE FALSE  TRUE  TRUE FALSE FALSE
 [37]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
 [43]  TRUE FALSE FALSE  TRUE  TRUE FALSE
 [49] FALSE FALSE FALSE  TRUE  TRUE FALSE
 [55] FALSE  TRUE  TRUE  TRUE FALSE  TRUE
 [61]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
 [67] FALSE  TRUE FALSE  TRUE FALSE  TRUE
 [73]  TRUE FALSE  TRUE  TRUE FALSE  TRUE
 [79]  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [85] FALSE FALSE FALSE FALSE  TRUE  TRUE
 [91]  TRUE FALSE FALSE FALSE FALSE  TRUE
 [97]  TRUE FALSE  TRUE  TRUE

| Keep working like that and you'll get
| there!

  |================                 |  50%

| Everywhere you see a TRUE, you know the
| corresponding element of my_data is NA.
| Likewise, everywhere you see a FALSE,
| you know the corresponding element of
| my_data is one of our random draws from
| the standard normal distribution.

...

  |==================               |  55%

| In our previous discussion of logical
| operators, we introduced the `==`
| operator as a method of testing for
| equality between two objects. So, you
| might think the expression my_data == NA
| yields the same results as is.na(). Give
| it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA
 [13] NA NA NA NA NA NA NA NA NA NA NA NA
 [25] NA NA NA NA NA NA NA NA NA NA NA NA
 [37] NA NA NA NA NA NA NA NA NA NA NA NA
 [49] NA NA NA NA NA NA NA NA NA NA NA NA
 [61] NA NA NA NA NA NA NA NA NA NA NA NA
 [73] NA NA NA NA NA NA NA NA NA NA NA NA
 [85] NA NA NA NA NA NA NA NA NA NA NA NA
 [97] NA NA NA NA

| Perseverance, that's the answer.

  |====================             |  60%

| The reason you got a vector of all NAs
| is that NA is not really a value, but
| just a placeholder for a quantity that
| is not available. Therefore the logical
| expression is incomplete and R has no
| choice but to return a vector of the
| same length as my_data that contains all
| NAs.

...

  |=====================            |  65%

| Don't worry if that's a little
| confusing. The key takeaway is to be
| cautious when using logical expressions
| anytime NAs might creep in, since a
| single NA value can derail the entire
| thing.

...

  |=======================          |  70%

| So, back to the task at hand. Now that
| we have a vector, my_na, that has a TRUE
| for every NA and FALSE for every numeric
| value, we can compute the total number
| of NAs in our data.

...

  |=========================        |  75%

| The trick is to recognize that
| underneath the surface, R represents
| TRUE as the number 1 and FALSE as the
| number 0. Therefore, if we take the sum
| of a bunch of TRUEs and FALSEs, we get
| the total number of TRUEs.

...

  |==========================       |  80%

| Let's give that a try here. Call the
| sum() function on my_na to count the
| total number of TRUEs in my_na, and thus
| the total number of NAs in my_data.
| Don't assign the result to a new
| variable.

> sum(my_na)
[1] 54

| You nailed it! Good job!

  |============================     |  85%

| Pretty cool, huh? Finally, let's take a
| look at the data to convince ourselves
| that everything 'adds up'. Print my_data
| to the console.

> my_data
  [1] -0.42019366          NA          NA
  [4]          NA  1.12833383 -1.79795998
  [7]  0.53071758          NA  0.69943598
 [10] -1.56988166  1.02063875          NA
 [13]  0.14044059 -1.43819441          NA
 [16]  0.50051855 -0.73913302  0.43452752
 [19]          NA  0.81866992          NA
 [22] -0.03671502          NA          NA
 [25]          NA          NA          NA
 [28]          NA          NA          NA
 [31]  0.44618026  1.35581407          NA
 [34]          NA  0.98543829  2.39938290
 [37]          NA          NA          NA
 [40]  1.69609961          NA          NA
 [43]          NA  0.21635459 -0.17235049
 [46]          NA          NA -1.64668140
 [49]  0.91616108 -0.83324084 -1.07020144
 [52]          NA          NA -0.65122292
 [55]  1.51099647          NA          NA
 [58]          NA -0.66854785          NA
 [61]          NA          NA          NA
 [64]          NA          NA -1.18261738
 [67] -1.14530515          NA -0.03002855
 [70]          NA  1.31836649          NA
 [73]          NA -1.15841323          NA
 [76]          NA  0.14811050          NA
 [79]          NA          NA -0.14775369
 [82] -0.98104944          NA -0.46067257
 [85]  0.37835057  0.50922038  0.10754059
 [88] -0.95959861          NA          NA
 [91]          NA -0.95031567  0.50451270
 [94] -0.10085822  0.66472131          NA
 [97]          NA  0.43045669          NA
[100]          NA

| That's a job well done!

  |==============================   |  90%

| Now that we've got NAs down pat, let's
| look at a second type of missing value
| -- NaN, which stands for 'not a number'.
| To generate NaN, try dividing (using a
| forward slash) 0 by 0 now.

> 0 / 0
[1] NaN

| You are quite good my friend!

  |===============================  |  95%

| Let's do one more, just for fun. In R,
| Inf stands for infinity. What happens if
| you subtract Inf from Inf?

> Inf - Inf
[1] NaN

| Keep up the great work!

  |=================================| 100%

| Would you like to inform someone about
| your successful completion of this
| lesson?

1: Yes
2: No

Selection: 1
| What is your full name?
Halli Goodman
| What is the email address of the person
| you'd like to notify?
mike.martin@senecacollege.ca

Does everything look good?

Your name: Halli Goodman
Send to: mike.martin@senecacollege.ca

1: Yes
2: No

Selection: 1

#########################################

I just tried to create a new email with the following info:

To: mike.martin@senecacollege.ca
Subject: Halli Goodman just completed R Programming - Missing Values
Body: <empty>

If it didn't work, you can send the same email manually.

#########################################


| Nice work!

| You've reached the end of this lesson!
| Returning to the main menu...

Â© 2015 Microsoft Terms Privacy & cookies Developers English (United States)

    
