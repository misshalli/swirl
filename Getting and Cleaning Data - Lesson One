  (int)

| You got it!

  |=======                          |  20%

| This output is much more informative and
| compact than what we would get if we
| printed the original data frame (mydf)
| to the console.

...

  |=======                          |  22%

| First, we are shown the class and
| dimensions of the dataset. Just below
| that, we get a preview of the data.
| Instead of attempting to print the
| entire dataset, dplyr just shows us the
| first 10 rows of data and only as many
| columns as fit neatly in our console. At
| the bottom, we see the names and classes
| for any variables that didn't fit on our
| screen.

...

  |========                         |  24%

| According to the "Introduction to dplyr"
| vignette written by the package authors,
| "The dplyr philosophy is to have small
| functions that each do one thing well."
| Specifically, dplyr supplies five
| 'verbs' that cover most fundamental data
| manipulation tasks: select(), filter(),
| arrange(), mutate(), and summarize().

...

  |========                         |  25%

| Use ?select to pull up the documentation
| for the first these core functions.

> ?select

| You are quite good my friend!

  |=========                        |  27%

| Help files for the other functions are
| accessible in the same way.

...

  |==========                       |  29%

| As may often be the case, particularly
| with larger datasets, we are only
| interested in some of the variables. Use
| select(cran, ip_id, package, country) to
| select only the ip_id, package, and
| country variables from the cran dataset.

> select(cran, ip_id, package, country)
Source: local data frame [225,468 x 3]

   ip_id      package country
1      1    htmltools      US
2      2      tseries      US
3      3        party      US
4      3        Hmisc      US
5      4       digest      CA
6      3 randomForest      US
7      3         plyr      US
8      5      whisker      US
9      6         Rcpp      CN
10     7     hflights      US
..   ...          ...     ...

| All that practice is paying off!

  |==========                       |  31%

| The first thing to notice is that we
| don't have to type cran$ip_id,
| cran$package, and cran$country, as we
| normally would when referring to columns
| of a data frame. The select() function
| knows we are referring to columns of the
| cran dataset.

...

  |===========                      |  32%

| Also, note that the columns are returned
| to us in the order we specified, even
| though ip_id is the rightmost column in
| the original dataset.

...

  |===========                      |  34%

| Recall that in R, the `:` operator
| provides a compact notation for creating
| a sequence of numbers. For example, try
| 5:20.

> 5:20
 [1]  5  6  7  8  9 10 11 12 13 14 15 16 17
[14] 18 19 20

| You're the best!

  |============                     |  36%

| Normally, this notation is reserved for
| numbers, but select() allows you to
| specify a sequence of columns this way,
| which can save a bunch of typing. Use
| select(cran, r_arch:country) to select
| all columns starting from r_arch and
| ending with country.

> select(cran, r_arch:country)
Source: local data frame [225,468 x 5]

   r_arch      r_os      package version
1  x86_64   mingw32    htmltools   0.2.4
2  x86_64   mingw32      tseries 0.10-32
3  x86_64 linux-gnu        party  1.0-15
4  x86_64 linux-gnu        Hmisc  3.14-4
5  x86_64 linux-gnu       digest   0.6.4
6  x86_64 linux-gnu randomForest   4.6-7
7  x86_64 linux-gnu         plyr   1.8.1
8  x86_64 linux-gnu      whisker   0.3-2
9      NA        NA         Rcpp  0.10.4
10 x86_64 linux-gnu     hflights     0.1
..    ...       ...          ...     ...
Variables not shown: country (chr)

| Perseverance, that's the answer.

  |============                     |  37%

| We can also select the same columns in
| reverse order. Give it a try.

> select(cran, country:r_arch)
Source: local data frame [225,468 x 5]

   country version      package      r_os
1       US   0.2.4    htmltools   mingw32
2       US 0.10-32      tseries   mingw32
3       US  1.0-15        party linux-gnu
4       US  3.14-4        Hmisc linux-gnu
5       CA   0.6.4       digest linux-gnu
6       US   4.6-7 randomForest linux-gnu
7       US   1.8.1         plyr linux-gnu
8       US   0.3-2      whisker linux-gnu
9       CN  0.10.4         Rcpp        NA
10      US     0.1     hflights linux-gnu
..     ...     ...          ...       ...
Variables not shown: r_arch (chr)

| You are doing so well!

  |=============                    |  39%

| Print the entire dataset again, just to
| remind yourself of what it looks like.
| You can do this at anytime during the
| lesson.

> cran
Source: local data frame [225,468 x 11]

    X       date     time    size
1   1 2014-07-08 00:54:41   80589
2   2 2014-07-08 00:59:53  321767
3   3 2014-07-08 00:47:13  748063
4   4 2014-07-08 00:48:05  606104
5   5 2014-07-08 00:46:50   79825
6   6 2014-07-08 00:48:04   77681
7   7 2014-07-08 00:48:35  393754
8   8 2014-07-08 00:47:30   28216
9   9 2014-07-08 00:54:58    5928
10 10 2014-07-08 00:15:35 2206029
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package (chr),
  version (chr), country (chr), ip_id
  (int)

| All that hard work is paying off!

  |=============                    |  41%

| Instead of specifying the columns we
| want to keep, we can also specify the
| columns we want to throw away. To see
| how this works, do select(cran, -time)
| to omit the time column.

> 
> select(cran, -time)
Source: local data frame [225,468 x 10]

    X       date    size r_version r_arch
1   1 2014-07-08   80589     3.1.0 x86_64
2   2 2014-07-08  321767     3.1.0 x86_64
3   3 2014-07-08  748063     3.1.0 x86_64
4   4 2014-07-08  606104     3.1.0 x86_64
5   5 2014-07-08   79825     3.0.2 x86_64
6   6 2014-07-08   77681     3.1.0 x86_64
7   7 2014-07-08  393754     3.1.0 x86_64
8   8 2014-07-08   28216     3.0.2 x86_64
9   9 2014-07-08    5928        NA     NA
10 10 2014-07-08 2206029     3.0.2 x86_64
.. ..        ...     ...       ...    ...
Variables not shown: r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| Excellent job!

  |==============                   |  42%

| The negative sign in front of time tells
| select() that we DON'T want the time
| column. Now, let's combine strategies to
| omit all columns from X through size
| (X:size). To see how this might work,
| let's look at a numerical example with
| -5:20.

> -5:20
 [1] -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7
[14]  8  9 10 11 12 13 14 15 16 17 18 19 20

| You nailed it! Good job!

  |===============                  |  44%

| Oops! That gaves us a vector of numbers
| from -5 through 20, which is not what we
| want. Instead, we want to negate the
| entire sequence of numbers from 5
| through 20, so that we get -5, -6, -7,
| ... , -18, -19, -20. Try the same thing,
| except surround 5:20 with parentheses so
| that R knows we want it to first come up
| with the sequence of numbers, then apply
| the negative sign to the whole thing.

> -(5:20)
 [1]  -5  -6  -7  -8  -9 -10 -11 -12 -13
[10] -14 -15 -16 -17 -18 -19 -20

| All that hard work is paying off!

  |===============                  |  46%

| Use this knowledge to omit all columns
| X:size using select().

> select(cran, -(X:size))
Source: local data frame [225,468 x 7]

   r_version r_arch      r_os      package
1      3.1.0 x86_64   mingw32    htmltools
2      3.1.0 x86_64   mingw32      tseries
3      3.1.0 x86_64 linux-gnu        party
4      3.1.0 x86_64 linux-gnu        Hmisc
5      3.0.2 x86_64 linux-gnu       digest
6      3.1.0 x86_64 linux-gnu randomForest
7      3.1.0 x86_64 linux-gnu         plyr
8      3.0.2 x86_64 linux-gnu      whisker
9         NA     NA        NA         Rcpp
10     3.0.2 x86_64 linux-gnu     hflights
..       ...    ...       ...          ...
Variables not shown: version (chr),
  country (chr), ip_id (int)

| Your dedication is inspiring!

  |================                 |  47%

| Now that you know how to select a subset
| of columns using select(), a natural
| next question is "How do I select a
| subset of rows?" That's where the
| filter() function comes in.

...

  |================                 |  49%

| Use filter(cran, package == "swirl") to
| select all rows for which the package
| variable is equal to "swirl". Be sure to
| use two equals signs side-by-side!

> filter(cran, package == "swirl")
Source: local data frame [820 x 11]

      X       date     time   size
1    27 2014-07-08 00:17:16 105350
2   156 2014-07-08 00:22:53  41261
3   358 2014-07-08 00:13:42 105335
4   593 2014-07-08 00:59:45 105465
5   831 2014-07-08 00:55:27 105335
6   997 2014-07-08 00:33:06  41261
7  1023 2014-07-08 00:35:36 106393
8  1144 2014-07-08 00:00:39 106534
9  1402 2014-07-08 00:41:41  41261
10 1424 2014-07-08 00:44:49 106393
..  ...        ...      ...    ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package (chr),
  version (chr), country (chr), ip_id
  (int)

| That's a job well done!

  |=================                |  51%

| Again, note that filter() recognizes
| 'package' as a column of cran, without
| you having to explicitly specify
| cran$package.

...

  |=================                |  53%

| The == operator asks whether the thing
| on the left is equal to the thing on the
| right. If yes, then it returns TRUE. If
| no, then FALSE. In this case, package is
| an entire vector (column) of values, so
| package == "swirl" returns a vector of
| TRUEs and FALSEs. filter() then returns
| only the rows of cran corresponding to
| the TRUEs.

...

  |==================               |  54%

| You can specify as many conditions as
| you want, separated by commas. For
| example filter(cran, r_version ==
| "3.1.1", country == "US") will return
| all rows of cran corresponding to
| downloads from users in the US running R
| version 3.1.1. Try it out.

> filter(cran, r_version == "3.1.1", country == "US")
Source: local data frame [1,588 x 11]

       X       date     time    size
1   2216 2014-07-08 00:48:58  385112
2  17332 2014-07-08 03:39:57  197459
3  17465 2014-07-08 03:25:38   23259
4  18844 2014-07-08 03:59:17  190594
5  30182 2014-07-08 04:13:15   77683
6  30193 2014-07-08 04:06:26 2351969
7  30195 2014-07-08 04:07:09  299080
8  30217 2014-07-08 04:32:04  568036
9  30245 2014-07-08 04:10:41  526858
10 30354 2014-07-08 04:32:51 1763717
..   ...        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package (chr),
  version (chr), country (chr), ip_id
  (int)

| That's correct!

  |==================               |  56%

| The conditions passed to filter() can
| make use of any of the standard
| comparison operators. Pull up the
| relevant documentation with ?Comparison
| (that's an uppercase C).

> ?Comparison

| That's correct!

  |===================              |  58%

| Edit your previous call to filter() to
| instead return rows corresponding to
| users in "IN" (India) running an R
| version that is less than or equal to
| "3.0.2". The up arrow on your keyboard
| may come in handy here. Don't forget
| your double quotes!

> filter(cran, users == "India", r_version == "3.0.2")
Error in filter_impl(.data, dots) : object 'users' not found
> filter(cran, country == "IN", r_version == "3.0.2")
Source: local data frame [2,915 x 11]

       X       date     time    size
1   9990 2014-07-08 02:11:32  397497
2   9991 2014-07-08 02:11:32  119199
3   9992 2014-07-08 02:11:33   81779
4  10189 2014-07-08 02:38:06  908854
5  10199 2014-07-08 02:38:28  178436
6  10200 2014-07-08 02:38:29   51811
7  10201 2014-07-08 02:38:29   65245
8  10202 2014-07-08 02:38:34 1635410
9  10203 2014-07-08 02:38:35  455085
10 10205 2014-07-08 02:38:39  228907
..   ...        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package (chr),
  version (chr), country (chr), ip_id
  (int)

| Almost! Try again. Or, type info() for
| more options.

| filter(cran, r_version <= "3.0.2",
| country == "IN") will return all rows
| for which r_version is less than or
| equal to "3.0.2" and country is equal to
| "IN".

> filter(cran, country == "IN", r_version <= "3.0.2")
Source: local data frame [4,139 x 11]

       X       date     time     size
1    348 2014-07-08 00:44:04 10218907
2   9990 2014-07-08 02:11:32   397497
3   9991 2014-07-08 02:11:32   119199
4   9992 2014-07-08 02:11:33    81779
5  10022 2014-07-08 02:19:45  1557078
6  10023 2014-07-08 02:19:46  1184285
7  10189 2014-07-08 02:38:06   908854
8  10199 2014-07-08 02:38:28   178436
9  10200 2014-07-08 02:38:29    51811
10 10201 2014-07-08 02:38:29    65245
..   ...        ...      ...      ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package (chr),
  version (chr), country (chr), ip_id
  (int)

| Nice work!

  |====================             |  59%

| Our last two calls to filter() requested
| all rows for which some condition AND
| another condition were TRUE. We can also
| request rows for which EITHER one
| condition OR another condition are TRUE.
| For example, filter(cran, country ==
| "US" | country == "IN") will gives us
| all rows for which the country variable
| equals either "US" or "IN". Give it a
| go.

> filter(cran, country == "US | country = "IN"")
Error: unexpected symbol in "filter(cran, country == "US | country = "IN"
> filter(cran, country == "US" | country = "IN")
Error: unexpected '=' in "filter(cran, country == "US" | country ="
> filter(cran, country == "US" | country == "IN")
Source: local data frame [95,283 x 11]

    X       date     time    size
1   1 2014-07-08 00:54:41   80589
2   2 2014-07-08 00:59:53  321767
3   3 2014-07-08 00:47:13  748063
4   4 2014-07-08 00:48:05  606104
5   6 2014-07-08 00:48:04   77681
6   7 2014-07-08 00:48:35  393754
7   8 2014-07-08 00:47:30   28216
8  10 2014-07-08 00:15:35 2206029
9  11 2014-07-08 00:15:25  526858
10 12 2014-07-08 00:14:45 2351969
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package (chr),
  version (chr), country (chr), ip_id
  (int)

| Nice work!

  |====================             |  61%

| Now, use filter() to fetch all rows for
| which size is strictly greater than (>)
| 100500 (no quotes, since size is
| numeric) AND r_os equals "linux-gnu".
| Hint: You are passing three arguments to
| filter(): the name of the dataset, the
| first condition, and the second
| condition.

> filter(cran, size > 100500, r_os == "linux-gnu")
Source: local data frame [33,683 x 11]

    X       date     time    size
1   3 2014-07-08 00:47:13  748063
2   4 2014-07-08 00:48:05  606104
3   7 2014-07-08 00:48:35  393754
4  10 2014-07-08 00:15:35 2206029
5  11 2014-07-08 00:15:25  526858
6  12 2014-07-08 00:14:45 2351969
7  14 2014-07-08 00:15:35 3097729
8  15 2014-07-08 00:14:37  568036
9  16 2014-07-08 00:15:50 1600441
10 18 2014-07-08 00:26:59  186685
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package (chr),
  version (chr), country (chr), ip_id
  (int)

| Keep up the great work!

  |=====================            |  63%

| Finally, we want to get only the rows
| for which the r_version is not missing.
| R represents missing values with NA and
| these missing values can be detected
| using the is.na() function.

...

  |=====================            |  64%

| To see how this works, try is.na(c(3, 5,
| NA, 10)).

> is.na(c(3, 5, NA, 10))
[1] FALSE FALSE  TRUE FALSE

| Perseverance, that's the answer.

  |======================           |  66%

| Now, put an exclamation point (!) before
| is.na() to change all of the TRUEs to
| FALSEs and all of the FALSEs to TRUEs,
| thus telling us what is NOT NA:
| !is.na(c(3, 5, NA, 10)).

> !is.na(c(3, 5, NA, 10))
[1]  TRUE  TRUE FALSE  TRUE

| Excellent work!

  |======================           |  68%

| Okay, ready to put all of this together?
| Use filter() to return all rows of cran
| for which r_version is NOT NA. Hint: You
| will need to use !is.na() as part of
| your second argument to filter().

> filter(cran, !is.na(r_version))
Source: local data frame [207,205 x 11]

    X       date     time    size
1   1 2014-07-08 00:54:41   80589
2   2 2014-07-08 00:59:53  321767
3   3 2014-07-08 00:47:13  748063
4   4 2014-07-08 00:48:05  606104
5   5 2014-07-08 00:46:50   79825
6   6 2014-07-08 00:48:04   77681
7   7 2014-07-08 00:48:35  393754
8   8 2014-07-08 00:47:30   28216
9  10 2014-07-08 00:15:35 2206029
10 11 2014-07-08 00:15:25  526858
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package (chr),
  version (chr), country (chr), ip_id
  (int)

| You are amazing!

  |=======================          |  69%

| We've seen how to select a subset of
| columns and rows from our dataset using
| select() and filter(), respectively.
| Inherent in select() was also the
| ability to arrange our selected columns
| in any order we please.

...

  |=======================          |  71%

| Sometimes we want to order the rows of a
| dataset according to the values of a
| particular variable. This is the job of
| arrange().

...

  |========================         |  73%

| To see how arrange() works, let's first
| take a subset of cran. select() all
| columns from size through ip_id and
| store the result in cran2.

> cran2 <- select(cran, size:ip_id)

| You got it!

  |=========================        |  75%

| Now, to order the ROWS of cran2 so that
| ip_id is in ascending order (from small
| to large), type arrange(cran2, ip_id).
| You may want to make your console wide
| enough so that you can see ip_id, which
| is the last column.

> arrange(cran2, ip_id)
Source: local data frame [225,468 x 8]

     size r_version r_arch         r_os     package version country
1   80589     3.1.0 x86_64      mingw32   htmltools   0.2.4      US
2  180562     3.0.2 x86_64      mingw32        yaml  2.1.13      US
3  190120     3.1.0   i386      mingw32       babel   0.2-6      US
4  321767     3.1.0 x86_64      mingw32     tseries 0.10-32      US
5   52281     3.0.3 x86_64 darwin10.8.0    quadprog   1.5-5      US
6  876702     3.1.0 x86_64    linux-gnu         zoo  1.7-11      US
7  321764     3.0.2 x86_64    linux-gnu     tseries 0.10-32      US
8  876702     3.1.0 x86_64    linux-gnu         zoo  1.7-11      US
9  321768     3.1.0 x86_64      mingw32     tseries 0.10-32      US
10 784093     3.1.0 x86_64    linux-gnu strucchange   1.5-0      US
..    ...       ...    ...          ...         ...     ...     ...
Variables not shown: ip_id (int)

| You are amazing!

  |=========================        |  76%

| To do the same, but in descending order, change the second
| argument to desc(ip_id), where desc() stands for 'descending'. Go
| ahead.

> arrange(cran, desc)
Error: cannot arrange column of class 'function'
> arrange(cran, desc(ip_id))
Source: local data frame [225,468 x 11]

        X       date     time    size r_version r_arch         r_os
1  225464 2014-07-08 23:43:15    5933        NA     NA           NA
2  225424 2014-07-08 23:40:17  569241     3.1.0 x86_64      mingw32
3  225371 2014-07-08 23:25:46  228444     3.1.0 x86_64      mingw32
4  225368 2014-07-08 23:20:35  308962     3.1.0 x86_64 darwin13.1.0
5  225359 2014-07-08 23:13:38  950964     3.0.3   i386      mingw32
6  225360 2014-07-08 23:13:41   80185     3.0.3   i386      mingw32
7  225361 2014-07-08 23:13:44 1431750     3.0.3   i386      mingw32
8  225349 2014-07-08 23:40:35 2189695     3.1.0 x86_64      mingw32
9  225290 2014-07-08 23:50:44 4818024     3.1.0   i386      mingw32
10 225220 2014-07-08 23:04:41  197495     3.1.0 x86_64      mingw32
..    ...        ...      ...     ...       ...    ...          ...
Variables not shown: package (chr), version (chr), country (chr),
  ip_id (int)

| You're close...I can feel it! Try it again. Or, type info() for
| more options.

| arrange(cran2, desc(ip_id)) will order the rows of our dataset
| from largest ip_id to smallest ip_id.

> arrange(cran2, desc(ip_id))
Source: local data frame [225,468 x 8]

      size r_version r_arch         r_os      package version
1     5933        NA     NA           NA          CPE   1.4.2
2   569241     3.1.0 x86_64      mingw32 multcompView   0.1-5
3   228444     3.1.0 x86_64      mingw32        tourr   0.5.3
4   308962     3.1.0 x86_64 darwin13.1.0          ctv   0.7-9
5   950964     3.0.3   i386      mingw32        knitr     1.6
6    80185     3.0.3   i386      mingw32    htmltools   0.2.4
7  1431750     3.0.3   i386      mingw32        shiny  0.10.0
8  2189695     3.1.0 x86_64      mingw32       RMySQL   0.9-3
9  4818024     3.1.0   i386      mingw32       igraph   0.7.1
10  197495     3.1.0 x86_64      mingw32         coda  0.16-1
..     ...       ...    ...          ...          ...     ...
Variables not shown: country (chr), ip_id (int)

| That's the answer I was looking for.

  |==========================       |  78%

| We can also arrange the data according to the values of multiple
| variables. For example, arrange(cran2, package, ip_id) will first
| arrange by package names (ascending alphabetically), then by
| ip_id. This means that if there are multiple rows with the same
| value for package, they will be sorted by ip_id (ascending
| numerically). Try arrange(cran2, package, ip_id) now.

> arrange(cran2, package, ip_id)
Source: local data frame [225,468 x 8]

    size r_version r_arch         r_os package version country
1  71677     3.0.3 x86_64 darwin10.8.0      A3   0.9.2      CN
2  71672     3.1.0 x86_64    linux-gnu      A3   0.9.2      US
3  71677     3.1.0 x86_64      mingw32      A3   0.9.2      IN
4  70438     3.0.1 x86_64 darwin10.8.0      A3   0.9.2      CN
5  71677        NA     NA           NA      A3   0.9.2      BR
6  71892     3.0.2 x86_64    linux-gnu      A3   0.9.2      IN
7  71677     3.1.0 x86_64    linux-gnu      A3   0.9.2      ZA
8  71672     3.1.0 x86_64      mingw32      A3   0.9.2      IL
9  71677     3.0.3 x86_64      mingw32      A3   0.9.2      DE
10 71672     3.1.0 x86_64      mingw32      A3   0.9.2      US
..   ...       ...    ...          ...     ...     ...     ...
Variables not shown: ip_id (int)

| You got it right!

  |==========================       |  80%

| Arrange cran2 by the following three variables, in this order:
| country (ascending), r_version (descending), and ip_id
| (ascending).

> arrange(cran2, country, desc(r_version), ip_id)
Source: local data frame [225,468 x 8]

      size r_version r_arch      r_os       package   version
1  1556858     3.1.1   i386   mingw32 RcppArmadillo 0.4.320.0
2  1823512     3.1.0 x86_64 linux-gnu          mgcv     1.8-1
3    15732     3.1.0   i686 linux-gnu          grnn     0.1.0
4  3014840     3.1.0 x86_64   mingw32          Rcpp    0.11.2
5   660087     3.1.0   i386   mingw32           xts     0.9-7
6   522261     3.1.0   i386   mingw32           FNN       1.1
7   522263     3.1.0   i386   mingw32           FNN       1.1
8  1676627     3.1.0 x86_64 linux-gnu         rgeos     0.3-5
9  2118530     3.1.0 x86_64 linux-gnu     spacetime     1.1-0
10 2217180     3.1.0 x86_64   mingw32         gstat    1.0-19
..     ...       ...    ...       ...           ...       ...
Variables not shown: country (chr), ip_id (int)

| You are doing so well!

  |===========================      |  81%

| To illustrate the next major function in dplyr, let's take
| another subset of our original data. Use select() to grab 3
| columns -- ip_id, package, and size (in that order) -- and store
| the result in a new variable called cran3.

> cran3 <- select(ip_id, package, size)
Error in select_(.data, .dots = lazyeval::lazy_dots(...)) : 
  object 'ip_id' not found
> cran3 <- select(cran, ip_id, package, size)

| You nailed it! Good job!

  |===========================      |  83%

| Take a look at cran3 now.

> cran3
Source: local data frame [225,468 x 3]

   ip_id      package    size
1      1    htmltools   80589
2      2      tseries  321767
3      3        party  748063
4      3        Hmisc  606104
5      4       digest   79825
6      3 randomForest   77681
7      3         plyr  393754
8      5      whisker   28216
9      6         Rcpp    5928
10     7     hflights 2206029
..   ...          ...     ...

| Excellent work!

  |============================     |  85%

| It's common to create a new variable based on the value of one or
| more variables already in a dataset. The mutate() function does
| exactly this.

...

  |=============================    |  86%

| The size variable represents the download size in bytes, which
| are units of computer memory. These days, megabytes (MB) are a
| more common unit of measurement. One megabyte is equal to 2^20
| bytes. That's 2 to the power of 20, which is approximately one
| million bytes!

...

  |=============================    |  88%

| We want to add a column called size_mb that contains the download
| size in megabytes. Here's the code to do it:
| 
| mutate(cran3, size_mb = size / 2^20)

> mutate(cran2, size_mb = size / 2^20)
Source: local data frame [225,468 x 9]

      size r_version r_arch      r_os      package version country
1    80589     3.1.0 x86_64   mingw32    htmltools   0.2.4      US
2   321767     3.1.0 x86_64   mingw32      tseries 0.10-32      US
3   748063     3.1.0 x86_64 linux-gnu        party  1.0-15      US
4   606104     3.1.0 x86_64 linux-gnu        Hmisc  3.14-4      US
5    79825     3.0.2 x86_64 linux-gnu       digest   0.6.4      CA
6    77681     3.1.0 x86_64 linux-gnu randomForest   4.6-7      US
7   393754     3.1.0 x86_64 linux-gnu         plyr   1.8.1      US
8    28216     3.0.2 x86_64 linux-gnu      whisker   0.3-2      US
9     5928        NA     NA        NA         Rcpp  0.10.4      CN
10 2206029     3.0.2 x86_64 linux-gnu     hflights     0.1      US
..     ...       ...    ...       ...          ...     ...     ...
Variables not shown: ip_id (int), size_mb (dbl)

| You almost had it, but not quite. Try again. Or, type info() for
| more options.

| mutate(cran3, size_mb = size / 2^20) will add a new column called
| size_mb that contains the download size in megabytes.

> mutate(cran3, size_mb = size / 2^20)
Source: local data frame [225,468 x 4]

   ip_id      package    size     size_mb
1      1    htmltools   80589 0.076855659
2      2      tseries  321767 0.306860924
3      3        party  748063 0.713408470
4      3        Hmisc  606104 0.578025818
5      4       digest   79825 0.076127052
6      3 randomForest   77681 0.074082375
7      3         plyr  393754 0.375513077
8      5      whisker   28216 0.026908875
9      6         Rcpp    5928 0.005653381
10     7     hflights 2206029 2.103833199
..   ...          ...     ...         ...

| That's a job well done!

  |==============================   |  90%

| An even larger unit of memory is a gigabyte (GB), which equals
| 2^10 megabytes. We might as well add another column for download
| size in gigabytes!

...mutate(cran3, size_gb = size / 2^10)

  |==============================   |  92%

| One very nice feature of mutate() is that you can use the value
| computed for your second column (size_mb) to create a third
| column, all in the same line of code. To see this in action,
| repeat the exact same command as above, except add a third
| argument creating a column that is named size_gb and equal to
| size_mb / 2^10.

> mutate(cran3, size_mb = size / 2 ^ 20, size_gb = size_mb / 2^10)
Source: local data frame [225,468 x 5]

   ip_id      package    size     size_mb      size_gb
1      1    htmltools   80589 0.076855659 7.505435e-05
2      2      tseries  321767 0.306860924 2.996689e-04
3      3        party  748063 0.713408470 6.966880e-04
4      3        Hmisc  606104 0.578025818 5.644783e-04
5      4       digest   79825 0.076127052 7.434282e-05
6      3 randomForest   77681 0.074082375 7.234607e-05
7      3         plyr  393754 0.375513077 3.667120e-04
8      5      whisker   28216 0.026908875 2.627820e-05
9      6         Rcpp    5928 0.005653381 5.520880e-06
10     7     hflights 2206029 2.103833199 2.054525e-03
..   ...          ...     ...         ...          ...

| Keep up the great work!

  |===============================  |  93%

| Let's try one more for practice. Pretend we discovered a glitch
| in the system that provided the original values for the size
| variable. All of the values in cran3 are 1000 bytes less than
| they should be. Using cran3, create just one new column called
| correct_size that contains the correct size.

> mutate(cran3, size = size + 1000)
Source: local data frame [225,468 x 3]

   ip_id      package    size
1      1    htmltools   81589
2      2      tseries  322767
3      3        party  749063
4      3        Hmisc  607104
5      4       digest   80825
6      3 randomForest   78681
7      3         plyr  394754
8      5      whisker   29216
9      6         Rcpp    6928
10     7     hflights 2207029
..   ...          ...     ...

| That's not exactly what I'm looking for. Try again. Or, type
| info() for more options.

| mutate(cran3, correct_size = size + 1000) will create one new
| column that is equal to the original sizes plus 1000.

> mutate(cran3, correct_size = size + 1000)
Source: local data frame [225,468 x 4]

   ip_id      package    size correct_size
1      1    htmltools   80589        81589
2      2      tseries  321767       322767
3      3        party  748063       749063
4      3        Hmisc  606104       607104
5      4       digest   79825        80825
6      3 randomForest   77681        78681
7      3         plyr  393754       394754
8      5      whisker   28216        29216
9      6         Rcpp    5928         6928
10     7     hflights 2206029      2207029
..   ...          ...     ...          ...

| Perseverance, that's the answer.

  |===============================  |  95%

| The last of the five core dplyr verbs, summarize(), collapses the
| dataset to a single row. Let's say we're interested in knowing
| the average download size. summarize(cran, avg_bytes =
| mean(size)) will yield the mean value of the size variable. Here
| we've chosen to label the result 'avg_bytes', but we could have
| named it anything. Give it a try.

> summarize(cran, avg_bytes = mean(size))
Source: local data frame [1 x 1]

  avg_bytes
1  844086.5

| All that practice is paying off!

  |================================ |  97%

| That's not particularly interesting. summarize() is most useful
| when working with data that has been grouped by the values of a
| particular variable.

...

  |================================ |  98%

| We'll look at grouped data in the next lesson, but the idea is
| that summarize() can give you the requested value FOR EACH group
| in your dataset.

...

  |=================================| 100%

| In this lesson, you learned how to manipulate data using dplyr's
| five main functions. In the next lesson, we'll look at how to
| take advantage of some other useful features of dplyr to make
| your life as a data analyst much easier.

...

| Are you currently enrolled in the Coursera course associated with
| this lesson?

1: Yes
2: No

Selection: 2

| You've reached the end of this lesson! Returning to the main
| menu...

| Please choose a course, or type 0 to exit swirl.

1: Getting and Cleaning Data
2: Take me to the swirl course repository!
