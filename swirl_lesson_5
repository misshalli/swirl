Selection: 5

  |                                 |   0%

| In this lesson, we'll see how to extract
| elements from a vector based on some
| conditions that we specify.

...

  |=                                |   3%

| For example, we may only be interested
| in the first 20 elements of a vector, or
| only the elements that are not NA, or
| only those that are positive or
| correspond to a specific variable of
| interest. By the end of this lesson,
| you'll know how to handle each of these
| scenarios.

...

  |==                               |   5%

| I've created for you a vector called x
| that contains a random ordering of 20
| numbers (from a standard normal
| distribution) and 20 NAs. Type x now to
| see what it looks like.

> x
 [1]          NA  0.21376424  1.93669673
 [4]          NA  0.52701607          NA
 [7] -1.28468436          NA          NA
[10]          NA          NA          NA
[13] -0.71143709  1.59719795          NA
[16]          NA  1.71133305 -0.77520435
[19]  0.61772508  0.16475139          NA
[22] -0.50813408  0.90913270          NA
[25]  0.27083587          NA          NA
[28]          NA          NA  0.45346679
[31] -0.02794626          NA  0.13335163
[34]  0.10347194          NA -0.11534409
[37] -0.21142534 -0.46673456          NA
[40]          NA

| Keep up the great work!

  |===                              |   8%

| The way you tell R that you want to
| select some particular elements (i.e. a
| 'subset') from a vector is by placing an
| 'index vector' in square brackets
| immediately following the name of the
| vector.

...

  |===                              |  10%

| For a simple example, try x[1:10] to
| view the first ten elements of x.

> x[1:10]
 [1]         NA  0.2137642  1.9366967
 [4]         NA  0.5270161         NA
 [7] -1.2846844         NA         NA
[10]         NA

| Your dedication is inspiring!

  |====                             |  13%

| Index vectors come in four different
| flavors -- logical vectors, vectors of
| positive integers, vectors of negative
| integers, and vectors of character
| strings -- each of which we'll cover in
| this lesson.

...

  |=====                            |  15%

| Let's start by indexing with logical
| vectors. One common scenario when
| working with real-world data is that we
| want to extract all elements of a vector
| that are not NA (i.e. missing data).
| Recall that is.na(x) yields a vector of
| logical values the same length as x,
| with TRUEs corresponding to NA values in
| x and FALSEs corresponding to non-NA
| values in x.

...

  |======                           |  18%

| What do you think x[is.na(x)] will give
| you?

1: A vector of length 0
2: A vector of all NAs
3: A vector with no NAs
4: A vector of TRUEs and FALSEs

Selection: 4

| You're close...I can feel it! Try it
| again.

| Remember that is.na(x) tells us where
| the NAs are in a vector. So if we subset
| x based on that, what do you expect to
| happen?

1: A vector of all NAs
2: A vector with no NAs
3: A vector of length 0
4: A vector of TRUEs and FALSEs

Selection: 1

| That's correct!

  |=======                          |  21%

| Prove it to yourself by typing
| x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA
[14] NA NA NA NA NA NA NA

| Your dedication is inspiring!

  |========                         |  23%

| Recall that `!` gives us the negation of
| a logical expression, so !is.na(x) can
| be read as 'is not NA'. Therefore, if we
| want to create a vector called y that
| contains all of the non-NA values from
| x, we can use y <- x[!is.na(x)]. Give it
| a try.

> x[!is.na(x)]
 [1]  0.21376424  1.93669673  0.52701607
 [4] -1.28468436 -0.71143709  1.59719795
 [7]  1.71133305 -0.77520435  0.61772508
[10]  0.16475139 -0.50813408  0.90913270
[13]  0.27083587  0.45346679 -0.02794626
[16]  0.13335163  0.10347194 -0.11534409
[19] -0.21142534 -0.46673456

| Not quite! Try again. Or, type info()
| for more options.

| Type y <- x[!is.na(x)] to capture all
| non-missing values from x.

> y <- x[!is.na(x)]

| Excellent job!

  |========                         |  26%

| Print y to the console.

> y
 [1]  0.21376424  1.93669673  0.52701607
 [4] -1.28468436 -0.71143709  1.59719795
 [7]  1.71133305 -0.77520435  0.61772508
[10]  0.16475139 -0.50813408  0.90913270
[13]  0.27083587  0.45346679 -0.02794626
[16]  0.13335163  0.10347194 -0.11534409
[19] -0.21142534 -0.46673456

| Excellent job!

  |=========                        |  28%

| Now that we've isolated the non-missing
| values of x and put them in y, we can
| subset y as we please.

...

  |==========                       |  31%

| Recall that the expression y > 0 will
| give us a vector of logical values the
| same length as y, with TRUEs
| corresponding to values of y that are
| greater than zero and FALSEs
| corresponding to values of y that are
| less than or equal to zero. What do you
| think y[y > 0] will give you?

1: A vector of all NAs
2: A vector of all the negative elements of y
3: A vector of all the positive elements of y
4: A vector of TRUEs and FALSEs
5: A vector of length 0

Selection: 4

| Try again. Getting it right on the first
| try is boring anyway!

| The logical expression y > 0 will give
| us TRUE for each element of y that is
| positive. Based on that, what do you
| think y[y > 0] will return?

1: A vector of all NAs
2: A vector of length 0
3: A vector of all the positive elements of y
4: A vector of all the negative elements of y
5: A vector of TRUEs and FALSEs

Selection: 3

| That's the answer I was looking for.

  |===========                      |  33%

| Type y[y > 0] to see that we get all of
| the positive elements of y, which are
| also the positive elements of our
| original vector x.

> y[y > 0]
 [1] 0.2137642 1.9366967 0.5270161
 [4] 1.5971980 1.7113331 0.6177251
 [7] 0.1647514 0.9091327 0.2708359
[10] 0.4534668 0.1333516 0.1034719

| You nailed it! Good job!

  |============                     |  36%

| You might wonder why we didn't just
| start with x[x > 0] to isolate the
| positive elements of x. Try that now to
| see why.

> x[x>0]
 [1]        NA 0.2137642 1.9366967
 [4]        NA 0.5270161        NA
 [7]        NA        NA        NA
[10]        NA        NA 1.5971980
[13]        NA        NA 1.7113331
[16] 0.6177251 0.1647514        NA
[19] 0.9091327        NA 0.2708359
[22]        NA        NA        NA
[25]        NA 0.4534668        NA
[28] 0.1333516 0.1034719        NA
[31]        NA        NA

| Nice work!

  |=============                    |  38%

| Since NA is not a value, but rather a
| placeholder for an unknown quantity, the
| expression NA > 0 evaluates to NA. Hence
| we get a bunch of NAs mixed in with our
| positive numbers when we do this.

...

  |==============                   |  41%

| Combining our knowledge of logical
| operators with our new knowledge of
| subsetting, we could do this --
| x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x) & x > 0]
 [1] 0.2137642 1.9366967 0.5270161
 [4] 1.5971980 1.7113331 0.6177251
 [7] 0.1647514 0.9091327 0.2708359
[10] 0.4534668 0.1333516 0.1034719

| Your dedication is inspiring!

  |==============                   |  44%

| In this case, we request only values of
| x that are both non-missing AND greater
| than zero.

...

  |===============                  |  46%

| I've already shown you how to subset
| just the first ten values of x using
| x[1:10]. In this case, we're providing a
| vector of positive integers inside of
| the square brackets, which tells R to
| return only the elements of x numbered 1
| through 10.

...

  |================                 |  49%

| Many programming languages use what's
| called 'zero-based indexing', which
| means that the first element of a vector
| is considered element 0. R uses
| 'one-based indexing', which (you guessed
| it!) means the first element of a vector
| is considered element 1.

...

  |=================                |  51%

| Can you figure out how we'd subset the
| 3rd, 5th, and 7th elements of x? Hint --
| Use the c() function to specify the
| element numbers as a numeric vector.

> x[c(3,5,7)]
[1]  1.9366967  0.5270161 -1.2846844

| Excellent job!

  |==================               |  54%

| It's important that when using integer
| vectors to subset our vector x, we stick
| with the set of indexes {1, 2, ..., 40}
| since x only has 40 elements. What
| happens if we ask for the zeroth element
| of x (i.e. x[0])? Give it a try.

> x[0]
numeric(0)

| Excellent work!

  |===================              |  56%

| As you might expect, we get nothing
| useful. Unfortunately, R doesn't prevent
| us from doing this. What if we ask for
| the 3000th element of x? Try it out.

> x[3000]
[1] NA

| Great job!

  |===================              |  59%

| Again, nothing useful, but R doesn't
| prevent us from asking for it. This
| should be a cautionary tale. You should
| always make sure that what you are
| asking for is within the bounds of the
| vector you're working with.

...

  |====================             |  62%

| What if we're interested in all elements
| of x EXCEPT the 2nd and 10th? It would
| be pretty tedious to construct a vector
| containing all numbers 1 through 40
| EXCEPT 2 and 10.

...

  |=====================            |  64%

| Luckily, R accepts negative integer
| indexes. Whereas x[c(2, 10)] gives us
| ONLY the 2nd and 10th elements of x,
| x[c(-2, -10)] gives us all elements of x
| EXCEPT for the 2nd and 10 elements.  Try
| x[c(-2, -10)] now to see this.

> x[c(-2, -10)]
 [1]          NA  1.93669673          NA
 [4]  0.52701607          NA -1.28468436
 [7]          NA          NA          NA
[10]          NA -0.71143709  1.59719795
[13]          NA          NA  1.71133305
[16] -0.77520435  0.61772508  0.16475139
[19]          NA -0.50813408  0.90913270
[22]          NA  0.27083587          NA
[25]          NA          NA          NA
[28]  0.45346679 -0.02794626          NA
[31]  0.13335163  0.10347194          NA
[34] -0.11534409 -0.21142534 -0.46673456
[37]          NA          NA

| You got it!

  |======================           |  67%

| A shorthand way of specifying multiple
| negative numbers is to put the negative
| sign out in front of the vector of
| positive numbers. Type x[-c(2, 10)] to
| get the exact same result.

> x[-c(2,10)]
 [1]          NA  1.93669673          NA
 [4]  0.52701607          NA -1.28468436
 [7]          NA          NA          NA
[10]          NA -0.71143709  1.59719795
[13]          NA          NA  1.71133305
[16] -0.77520435  0.61772508  0.16475139
[19]          NA -0.50813408  0.90913270
[22]          NA  0.27083587          NA
[25]          NA          NA          NA
[28]  0.45346679 -0.02794626          NA
[31]  0.13335163  0.10347194          NA
[34] -0.11534409 -0.21142534 -0.46673456
[37]          NA          NA

| You got it right!

  |=======================          |  69%

| So far, we've covered three types of
| index vectors -- logical, positive
| integer, and negative integer. The only
| remaining type requires us to introduce
| the concept of 'named' elements.

...

  |========================         |  72%

| Create a numeric vector with three named
| elements using vect <- c(foo = 11, bar =
| 2, norf = NA).

> vect <- c(foo = 11, bar = 2, norf = NA)

| That's a job well done!

  |=========================        |  74%

| When we print vect to the console,
| you'll see that each element has a name.
| Try it out.

> vect
 foo  bar norf 
  11    2   NA 

| You are amazing!

  |=========================        |  77%

| We can also get the names of vect by
| passing vect as an argument to the
| names() function. Give that a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| You are quite good my friend!

  |==========================       |  79%

| Alternatively, we can create an unnamed
| vector vect2 with c(11, 2, NA). Do that
| now.

> vect2 <- c(11, 2, NA)

| You are doing so well!

  |===========================      |  82%

| Then, we can add the `names` attribute
| to vect2 after the fact with
| names(vect2) <- c("foo", "bar", "norf").
| Go ahead.

> names(nect2)
Error: object 'nect2' not found
> 
> names(vect2) <- c("foo", "bar", "norf")

| You nailed it! Good job!

  |============================     |  85%

| Now, let's check that vect and vect2 are
| the same by passing them as arguments to
| the identical() function.

> identical (vect, vect2)
[1] TRUE

| That's a job well done!

  |=============================    |  87%

| Indeed, vect and vect2 are identical
| named vectors.

...

  |==============================   |  90%

| Now, back to the matter of subsetting a
| vector by named elements. Which of the
| following commands do you think would
| give us the second element of vect?

1: vect["bar"]
2: vect[bar]
3: vect["2"]

Selection: 1

| That's correct!

  |==============================   |  92%

| Now, try it out.

> vect["bar"]
bar 
  2 

| Excellent job!

  |===============================  |  95%

| Likewise, we can specify a vector of
| names with vect[c("foo", "bar")]. Try it
| out.

> vect[c("foo", "bar")]
foo bar 
 11   2 

| Keep working like that and you'll get
| there!

  |================================ |  97%

| Now you know all four methods of
| subsetting data from vectors. Different
| approaches are best in different
| scenarios and when in doubt, try it out!

...

  |=================================| 100%

| Would you like to inform someone about
| your successful completion of this
| lesson?

1: No
2: Yes

Selection: 2
| What is your full name?
Halli Goodman
| What is the email address of the person
| you'd like to notify?
mike.martin@senecacollege.ca

Does everything look good?

Your name: Halli Goodman
Send to: mike.martin@senecacollege.ca

1: Yes
2: No

Selection: 1

#########################################

I just tried to create a new email with the following info:

To: mike.martin@senecacollege.ca
Subject: Halli Goodman just completed R Programming - Subsetting Vectors
Body: <empty>

If it didn't work, you can send the same email manually.

#########################################


| You are quite good my friend!

| You've reached the end of this lesson!
| Returning to the main menu...
